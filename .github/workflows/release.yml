name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: todo-cli
            asset_name: todo-cli-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: todo-cli
            asset_name: todo-cli-linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: todo-cli.exe
            asset_name: todo-cli-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: todo-cli
            asset_name: todo-cli-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: todo-cli
            asset_name: todo-cli-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y binutils-aarch64-linux-gnu
        pip3 install ziglang
        cargo install cargo-zigbuild

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      shell: bash
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          cargo zigbuild --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Strip binary (Linux and macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        else
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # タグ名を取得
        tag_name=${GITHUB_REF#refs/tags/}

        # リリースノートを作成
        echo "## Release ${tag_name}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Choose the appropriate binary for your platform:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Linux x86_64**: \`todo-cli-linux-x86_64\`" >> release_notes.md
        echo "- **Linux ARM64**: \`todo-cli-linux-aarch64\`" >> release_notes.md
        echo "- **Windows x86_64**: \`todo-cli-windows-x86_64.exe\`" >> release_notes.md
        echo "- **macOS x86_64**: \`todo-cli-macos-x86_64\`" >> release_notes.md
        echo "- **macOS ARM64 (Apple Silicon)**: \`todo-cli-macos-aarch64\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the appropriate binary for your platform" >> release_notes.md
        echo "2. Make it executable: \`chmod +x <binary-name>\`" >> release_notes.md
        echo "3. Move it to a directory in your PATH: \`mv <binary-name> ~/.local/bin/todo-cli\`" >> release_notes.md
        echo "4. Or use the install script: \`curl -sSL https://github.com/${{ github.repository }}/raw/main/install.sh | bash\`" >> release_notes.md

        # リリースを作成（ファイルなし）
        gh release create "${tag_name}" \
          --title "Release ${tag_name}" \
          --notes-file release_notes.md

        # ファイル名を変更してアップロード
        gh release upload "${tag_name}" \
          artifacts/todo-cli-linux-x86_64/todo-cli#todo-cli-linux-x86_64 \
          artifacts/todo-cli-linux-aarch64/todo-cli#todo-cli-linux-aarch64 \
          artifacts/todo-cli-windows-x86_64.exe/todo-cli.exe#todo-cli-windows-x86_64.exe \
          artifacts/todo-cli-macos-x86_64/todo-cli#todo-cli-macos-x86_64 \
          artifacts/todo-cli-macos-aarch64/todo-cli#todo-cli-macos-aarch64